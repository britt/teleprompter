{
  "style-guide": "# Documentation Style Guide\n\n## Project Summary\n\nteleprompter is a TypeScript project with a small repository containing a README, a TypeScript entrypoint (src/index.ts), a worker type definition (worker-configuration.d.ts), and a TypeDoc configuration file (typedoc.json). No project description or documentation pages beyond the README are present. The repository appears to target developers who will consume an API (TypeScript types and runtime entrypoints) and expect generated API documentation produced by TypeDoc. The documentation goals are to provide clear API reference (via TypeDoc), usage examples, and short developer-facing guides (installation, configuration, and examples). The technical complexity is moderate: TypeScript code, TypeDoc-generated API docs, and small configuration files. Audience: library consumers (developers integrating teleprompter) and contributors (developers editing the codebase and docs).\n\n## Context\n\n**Project:** teleprompter\n**Description:** No description available\n**Publishing System:** TypeDoc\n\n## Primary Documentation Goals\n\n## Writing Rules\n\n### Core Principles\n- **Be concise** - Use the minimum words necessary\n- **Be practical** - Focus on actionable information\n- **Be example-driven** - Show working code for every concept\n- **Be consistent** - Match existing documentation patterns\n\n### Tone Guidelines\n\n#### Default Tone (Technical Users)\n- Direct and practical language\n- Assume familiarity with TypeScript, package managers, CLI\n- Use technical jargon and shorthand\n- Focus on code examples over explanations\n- Avoid marketing language or benefit statements\n\n#### Non-Technical User Adjustments\nWhen explicitly writing for non-technical users:\n- Explain what each command does and why\n- Spell out abbreviations and technical terms\n- Provide simpler code examples with explanations\n- Include more step-by-step guidance\n- Link to additional learning resources\n\n### Publishing System Requirements\nTypeDoc-specific requirements and recommendations\n\nOverview\n- TypeDoc itself does not require front matter in source files; it generates API documentation from JSDoc/TSDoc comments in the codebase. There are no front-matter fields present in the repository. However, if you integrate TypeDoc output into a static site generator (Docusaurus, Hugo, MkDocs, etc.), that system may require front matter. Document authors should follow both: produce rich JSDoc/TSDoc in code and add front matter when creating manual Markdown pages that will be published alongside TypeDoc output.\n\nRequired metadata fields\n- For TypeDoc alone: none required. TypeDoc relies on typedoc.json and TSDoc/JSDoc comments.\n- For integration pages (recommended fields): when you create manual Markdown pages to sit beside TypeDoc output, include this recommended front matter set (not required by TypeDoc, but used by most doc sites):\n\nExact recommended front-matter template (use when adding manual pages to a docs site):\n```\n---\ntitle: \"<Page Title>\"\ndescription: \"A one-sentence summary of this page.\"\nsidebar_label: \"<Short label for sidebar>\"\n# Optional fields depending on site generator\nhide_title: false\ntags:\n  - teleprompter\n  - api\n---\n```\n\nTypeDoc configuration (typedoc.json)\n- Keep typedoc.json in repo root (already present). Ensure these key fields are set consistently. Example typedoc.json to use with teleprompter:\n```\n{\n  \"entryPoints\": [\"src/index.ts\"],\n  \"out\": \"docs/api\",\n  \"tsconfig\": \"tsconfig.json\",\n  \"plugin\": [\"typedoc-plugin-markdown\"],\n  \"exclude\": [\"**/*.test.ts\", \"**/__mocks__/**\"],\n  \"excludePrivate\": true,\n  \"excludeProtected\": false,\n  \"includeVersion\": true,\n  \"listInvalidSymbolLinks\": true\n}\n```\n- Explanation of important options:\n  - entryPoints: list the main files TypeDoc should parse (use src/index.ts for library entry).\n  - out: output directory for generated docs (choose docs/api to integrate with site).\n  - excludePrivate: set to true to avoid leaking private/internal API into published docs.\n  - plugin: typedoc-plugin-markdown is commonly used to generate Markdown output if you want to merge TypeDoc output with a Markdown site.\n\nCoding documentation conventions for TypeDoc\n- Use TSDoc/JSDoc comments above exported functions, classes, interfaces, and types. Include @param, @returns, @example, and @remarks where appropriate.\n- Prefer TypeScript type annotations in signatures and concise examples showing realistic usage.\n\nExample JSDoc/TSDoc comment (include inside source code file):\n```ts\n/**\n * Starts a teleprompter session.\n *\n * @param text - The text to display in the teleprompter.\n * @param options - Configuration options for speed and display.\n * @returns A controller object that can pause, resume, and stop the session.\n *\n * @example\n * ```ts\n * const controller = createTeleprompter('Hello world', {wpm: 120});\n * controller.start();\n * ```\n */\nexport function createTeleprompter(text: string, options?: TeleprompterOptions): TeleprompterController {\n  // implementation\n}\n```\n\nPublishing checkli",
  "style-guide-path": "/home/runner/work/teleprompter/teleprompter/.doc.holiday/styleguide.md",
  "summary": "Style guide generated from 6 files with 19 sections covering documentation patterns and conventions."
}